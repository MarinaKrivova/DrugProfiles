Best results:

#1. just drug profiles and cell lines

kernel_parameters_df1 = {'linear': {'alpha': {1: 200.0, 2: 100.0, 3: 100.0, 4: 50.0}}, 'sigmoid': {'alpha': {1: 5.0, 2: 5.0, 3: 1.0, 4: 0.5}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-05, 4: 0.01}, 'coef0': {1: 10.0, 2: 10.0, 3: 1.0, 4: 5.0}}, 'rbf': {'alpha': {1: 7.0, 2: 5.0, 3: 5.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-04, 4: 1e-04}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}, 'polynomial': {'alpha': {1: 5.0, 2: 1.0, 3: 1.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-05, 4: 1e-04}, 'degree': {1: 1.0, 2: 1.0, 3: 1.0, 4: 5.0}}, 'additive_chi2': {'alpha': {1: 500.0, 2: 500.0, 3: 300.0, 4: 300.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-05, 4: 1e-05}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}, 'laplacian': {'alpha': {1: 7.0, 2: 5.0, 3: 5.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-04, 4: 1e-04}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}}

best_kernels_for_coef_df1 = {1: 'sigmoid', 2: 'polynomial', 3: 'polynomial', 4: 'sigmoid'}


# 2. drug profiles, cell lines and drug description

kernel_parameters_df2 = {'linear': {'alpha': {1: 200.0, 2: 100.0, 3: 100.0, 4: 100.0}}, 'sigmoid': {'alpha': {1: 5.0, 2: 5.0, 3: 1.0, 4: 0.5}, 'gamma': {1: 0.5, 2: 0.5, 3: 1e-05, 4: 0.01}, 'coef0': {1: -0.1, 2: -0.1, 3: 1.0, 4: 5.0}}, 'rbf': {'alpha': {1: 7.0, 2: 5.0, 3: 5.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-04, 4: 1e-04}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}, 'polynomial': {'alpha': {1: 5.0, 2: 1.0, 3: 1.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-05, 4: 1e-04}, 'degree': {1: 1.0, 2: 1.0, 3: 1.0, 4: 5.0}}, 'additive_chi2': {'alpha': {1: 500.0, 2: 500.0, 3: 300.0, 4: 300.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-05, 4: 1e-05}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}, 'laplacian': {'alpha': {1: 7.0, 2: 5.0, 3: 5.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-04, 4: 1e-04}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}}


best_kernels_for_coef_df2 = {1: 'polynomial', 2: 'polynomial', 3: 'polynomial', 4: 'sigmoid'}

# 3. drug profiles, cell lines and drug features

kernel_parameters_df3 = {'linear': {'alpha': {1: 500.0, 2: 500.0, 3: 500.0, 4: 500.0}}, 'sigmoid': {'alpha': {1: 5.0, 2: 1.0, 3: 1.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 0.01, 3: 1e-05, 4: 1e-05}, 'coef0': {1: 10.0, 2: -0.1, 3: -0.1, 4: -0.1}}, 'rbf': {'alpha': {1: 7.0, 2: 5.0, 3: 5.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-04, 4: 1e-04}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}, 'polynomial': {'alpha': {1: 7.0, 2: 5.0, 3: 5.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-05, 4: 1e-05}, 'degree': {1: 1.0, 2: 1.0, 3: 1.0, 4: 3.0}}, 'additive_chi2': {'alpha': {1: 500.0, 2: 500.0, 3: 300.0, 4: 300.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-05, 4: 1e-05}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}, 'laplacian': {'alpha': {1: 7.0, 2: 5.0, 3: 5.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-04, 4: 1e-04}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}}

best_kernels_for_coef_df3 = {1: 'polynomial', 2: 'sigmoid', 3: 'linear', 4: 'sigmoid'}


# 4. drug profiles, cell lines and drug features with scaling

kernel_parameters_df4 = {'linear': {'alpha': {1: 300.0, 2: 200.0, 3: 100.0, 4: 100.0}}, 'sigmoid': {'alpha': {1: 5.0, 2: 5.0, 3: 1.0, 4: 0.5}, 'gamma': {1: 0.5, 2: 0.1, 3: 1e-05, 4: 0.01}, 'coef0': {1: -0.1, 2: 1.0, 3: 1.0, 4: 5.0}}, 'rbf': {'alpha': {1: 7.0, 2: 5.0, 3: 5.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-04, 4: 1e-04}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}, 'polynomial': {'alpha': {1: 5.0, 2: 1.0, 3: 1.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-05, 4: 1e-04}, 'degree': {1: 1.0, 2: 1.0, 3: 1.0, 4: 5.0}}, 'additive_chi2': {'alpha': {1: 500.0, 2: 500.0, 3: 300.0, 4: 300.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-05, 4: 1e-05}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}, 'laplacian': {'alpha': {1: 7.0, 2: 5.0, 3: 5.0, 4: 1.0}, 'gamma': {1: 1e-05, 2: 1e-05, 3: 1e-04, 4: 1e-04}, 'coef0': {1: -0.1, 2: -0.1, 3: -0.1, 4: -0.1}}}


best_kernels_for_coef_df4 =  {1: 'polynomial', 2: 'polynomial', 3: 'polynomial', 4: 'sigmoid'}


1. Training for each drug and the whole data
- difference in tuned parameters?
- difference in results?










2. ordinal Lasso and Ridge 
-coefficients as pointers to feature importance

3. Epsilon-Support Vector Regression.

3. meaning and values of sigmoid coefficients
sigmoid_4_param(x, x0, L, k, d):
    """ Comparing with Dennis Wang's sigmoid:
    x0 -  p - position, correlation with IC50 or EC50
        bounds [0, 1]
    L = 1 in Dennis Wang's sigmoid, protect from devision by zero if x is too small 
        L<1 inverted sigmoid, l=100 - lower upper and lower boundso sigmpoid on y axis (y= [0.1, 0.11])
        bounds [0.8, 10]
    k = -1/s (s -shape parameter)  default = -10 k=0 straight line, k<0 sigmoid around k=-10
        bounds [1, -100]
    d - determines the vertical position of the sigmoid - shift on y axis - better fitting then Dennis Wang's sigmoid
         bounds [0, 0.9]
    parameters_bound ((0, 0.8, -100, 0), (1, 10, 1, 0.9))
    """
    y =  1/ (L + np.exp(-k*(x-x0))) + d
    
 y = 1/(param_2 + np.exp(-param_3* (x- param_1))) + param_4

mean values of coefficients in filtered data

param_1: x0 = [-12.73, 10.32] mean = 0.595 ;  25-75% [0.39-0.50]
param_2: L = [-35, 31.90]     mean = 1.015 ;  25-75% [1.01-1.20]
param_3: k = =[-282.7, 10.08] mean = -18.72 ; 25-75%[-20.4 , -8.7]
param_4: d = [-2.79, 1.79]    mean = 0.083 ;  25-75% [0.005, 0.174]

- distribution curve for found parameters?


4. What if I take some "average" sigmoid and apply it as a filtering criteria
how many samples will have R2 > 0.9?

5. what if we do not predict param_3 as it has not normal distribution but assume that it is constant for all the cases?

# how to do scaling? within drugs of for the predetermined train/test data - done
# separate function to train and test with best found parameters
# feature importance - coefficients of Ridge and Lasso regressions as separate dataframes

# Observation: there is no pair drug-cell line with two studied concentration
# But there are 24 drugs from 265 which have two max concentrations
# Are these 24 drugs in the "perfect" filtered data? Only 18 of them !!!

#which/how many columns are used in trainings
-drug profiles and cell lines    Number of X_columns: 1073
-drug profiles, cell lines and drug description   Number of X_columns: 1094 (21 dumnies from Target columns)
-drug profiles, cell lines and drug properties    Number of X_columns: 1122 (PubChemFeatures)

# что мне надо:
предсказанные коэффициенты кривых для тестовых данных
метрика мне не нужна! - можно посчитать позже и мсе и мае.

вывести предсказанные коэффициенты модели
отдельно для каждого лекарства?
потом сравнить с обобщенными данными

то же самое как для kernelRidge, сделать для SVM
https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html
